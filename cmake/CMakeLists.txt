###############################################################################
# NoxicCore MMORPG Server
# Copyright (c) 2011-2014 Crimoxic Team
# Copyright (c) 2008-2014 ArcEmu Team <http://www.arcemu.org/>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

PROJECT(NoxicCore)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.7)

MACRO(IS_ARCH_64BIT)
	IF(NOT WIN32)
		IF(CMAKE_SYSTEM_PROCESSOR MATCHES "[xX]64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "[xX]86_64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "[aA][mM][dD]64")
			SET(IS_64BIT TRUE)
		ELSE()
			SET(IS_64BIT FALSE)
		ENDIF()
	ELSE(NOT WIN32)
		IF(CMAKE_GENERATOR MATCHES Win64*)
			SET(IS_64BIT TRUE)
		ELSE(CMAKE_GENERATOR MATCHES Win64*)
			SET(IS_64BIT FALSE)
		ENDIF(CMAKE_GENERATOR MATCHES Win64*)
	ENDIF(NOT WIN32)
ENDMACRO(IS_ARCH_64BIT)

IF(WIN32)
	IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
		SET(CMAKE_INSTALL_PREFIX "C:/NoxicCore" CACHE PATH "Install path prefix" FORCE)
	ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
ENDIF(WIN32)

SET(GLOBAL_DEFINES "-DHAVE_CONFIG_H")

IF(CMAKE_GENERATOR MATCHES Visual*)
	SET(GLOBAL_DEFINES ${GLOBAL_DEFINES} "/MP")
	SET(GLOBAL_DEFINES ${GLOBAL_DEFINES} "/bigobj")
ENDIF()

IS_ARCH_64BIT()

#Check platform version.
IF(IS_64BIT)
	SET(GLOBAL_DEFINES ${GLOBAL_DEFINES} -"DX64")
	IF(CMAKE_GENERATOR MATCHES NMake*)
		SET(GLOBAL_DEFINES ${GLOBAL_DEFINES} "-bigobj")
	ENDIF()
ENDIF()

#mac osx
IF(APPLE)
	SET(GLOBAL_DEFINES ${GLOBAL_DEFINES} "-DHAVE_DARWIN")
	SET(IS_MAC TRUE)
ELSEIF(UNIX)
	#mac has unix defined too but if 'IF(APPLE)' fails, then it's not apple.
	#check for freebsd
	IF((CMAKE_SYSTEM_NAME  STREQUAL "FreeBSD") OR (CMAKE_SYSTEM_NAME STREQUAL kFreeBSD))
		SET(GLOBAL_DEFINES ${GLOBAL_DEFINES} "-DUSE_KQUEUE")
		SET(IS_FREEBSD TRUE)
	ELSE()
		SET(GLOBAL_DEFINES ${GLOBAL_DEFINES} "-DUSE_EPOLL")
		SET(IS_LINUX TRUE)
	ENDIF()
ENDIF()

SET(ROOT_PATH  ${CMAKE_SOURCE_DIR}/..)

#We have our own custom modules that we use. This tells CMake where to find them.
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ROOT_PATH}/cmake_modules)
SET(DEPENDENCY_ROOT ${ROOT_PATH}/dep)
SET(DEPENDENCY_SOURCES ${DEPENDENCY_ROOT}/src)
SET(DEPENDENCY_LIBS ${DEPENDENCY_ROOT}/lib)
SET(DEPENDENCY_INCLUDE_ROOT ${DEPENDENCY_ROOT}/INCLUDE)
SET(DEPENDENCY_DLLS64 ${DEPENDENCY_ROOT}/dll64)

IF(IS_64BIT)
	SET(DEPENDENCY_DLLS ${DEPENDENCY_ROOT}/dll64)
ELSE()
	SET(DEPENDENCY_DLLS ${DEPENDENCY_ROOT}/dll)
ENDIF()

#Install libmysql.dll required for our core to run.
IF(WIN32)
	SET(INSTALLED_DEPENDENCIES ${DEPENDENCY_DLLS}/libmysql.dll ${DEPENDENCY_DLLS}/libeay32.dll)
ENDIF(WIN32)

#Our configurable variables.
IF(WIN32)
	SET(ARCEMU_CONFIGSFILE_PATH configs CACHE PATH "Path where the arcemu config files are.")
ELSE(WIN32)
	SET(ARCEMU_CONFIGSFILE_PATH etc CACHE PATH "Path where the arcemu config files are.")
ENDIF(WIN32)

SET(ARCEMU_SCRIPTLIB_PATH "modules" CACHE PATH "The directory which contains the 'lib' directory that has the script libraries.")
SET(BUILD_LOGON TRUE CACHE BOOL "Build Logon server.")
SET(BUILD_WORLD TRUE CACHE BOOL "Build World server.")
SET(BUILD_SCRIPTS TRUE CACHE BOOL "Build script libraries.")
SET(BUILD_TOOLS FALSE CACHE BOOL "Build tools.")
SET(VISUALSTUDIO_COMPILERHEAPLIMIT 400 CACHE STRING "Visual Studio compiler heap limit. Ignore on darwin and unix platforms.")

INCLUDE(CompilerVersion)
IF(CMAKE_GENERATOR MATCHES Unix*)
	ADD_DEFINITIONS(-Wno-deprecated)
	#Extract Revision
	EXECUTE_PROCESS(WORKING_DIRECTORY ${ROOT_PATH} COMMAND sh git_version.sh)
	
	#Check support for unordered_map/SET
	GetCompilerVersion(gcc_version)
	IF(DEFINED gcc_version AND ( ${gcc_version} VERSION_EQUAL "4.3" OR ${gcc_version} VERSION_GREATER "4.3" ) AND NOT APPLE)
		ADD_DEFINITIONS(-DHAS_CXX0X -std=gnu++0x)
	ENDIF()
	SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} --no-warnings")
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} --no-warnings")
	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -Wall -Wfatal-errors -Wextra -Wno-ignored-qualifiers")
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wfatal-errors -Wextra -Wno-ignored-qualifiers")
ELSEIF(CMAKE_GENERATOR MATCHES Visual*)
	#Extract revision
	EXECUTE_PROCESS(WORKING_DIRECTORY ${ROOT_PATH} COMMAND git_version.bat)
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS /EHa)
	
	#Check support for unordered_map/SET
	GetCompilerVersion(msvc_version)
	IF(DEFINED ${msvc_version} AND ${msvc_version} GREATER "1799")
		ADD_DEFINITIONS(-DHAS_CXX0X)
	ENDIF()
	
	#This fixes PCH issues 'Inconsistent values for /Zm'
	IF(${CMAKE_CXX_FLAGS} MATCHES "(/Zm)([0-9]+)")
		STRING(REGEX REPLACE "(/Zm)([0-9]+)" "\\1${VISUALSTUDIO_COMPILERHEAPLIMIT}" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
	ELSE()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zm${VISUALSTUDIO_COMPILERHEAPLIMIT}")
	ENDIF()
		
	IF(${CMAKE_C_FLAGS} MATCHES "(/Zm)([0-9]+)")
		STRING(REGEX REPLACE "(/Zm)([0-9]+)" "\\1${VISUALSTUDIO_COMPILERHEAPLIMIT}" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
	ELSE()
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Zm${VISUALSTUDIO_COMPILERHEAPLIMIT}")
	ENDIF()
ENDIF()

INCLUDE(DetectSystem)
MESSAGE(STATUS "Processor: " ${CMAKE_SYSTEM_PROCESSOR} )
MESSAGE(STATUS "Operating System: " ${CMAKE_SYSTEM_NAME} " " ${SYSTEM_VERSION} " (" ${CMAKE_SYSTEM_VERSION} ")" )
MESSAGE(STATUS "Compiler: " ${COMPILER_NAME} " (" ${COMPILER_VERSION} ")" )
MESSAGE(STATUS "Compiler Bit: " ${SYSTEM_NAME} )

INCLUDE(FindGit)
#INCLUDE(genrev)
INCLUDE(showoptions)
#Pass our configurable variables to the C++ preprocessor.
ADD_DEFINITIONS(${GLOBAL_DEFINES} -DCONFDIR=\"${ARCEMU_CONFIGSFILE_PATH}\" -DPREFIX=\"${ARCEMU_SCRIPTLIB_PATH}\")

#These are SET by FIND_PACKAGE or the zlib and pcre subPROJECTs.
SET(ZLIB_LIBRARIES "" CACHE INTERNAL "Zlib libraries.")
SET(PCRE_LIBRARIES "" CACHE INTERNAL "PCRE libraries.")
SET(PCRE_INCLUDE_DIRS "" CACHE INTERNAL "PCRE INCLUDE dirs.")
#mark them as advanced so they don't show up on the gui.
MARK_AS_ADVANCED(ZLIB_LIBRARIES PCRE_LIBRARIES PCRE_INCLUDE_DIRS)

SET(GLOBAL_INCLUDE_DIRS 
	${ROOT_PATH}/src/arcemu-shared
	${ROOT_PATH}/src/arcemu-world
	${ROOT_PATH}/src/arcemu-logonserver
	${DEPENDENCY_INCLUDE_ROOT}
	${DEPENDENCY_INCLUDE_ROOT}/g3dlite
	${DEPENDENCY_INCLUDE_ROOT}/vmaplib
	${DEPENDENCY_INCLUDE_ROOT}/pcre
	${DEPENDENCY_INCLUDE_ROOT}/zlib
	${DEPENDENCY_INCLUDE_ROOT}/recast
	${DEPENDENCY_INCLUDE_ROOT}/detour
)

#Find our needed libs
IF(NOT WIN32)
	FIND_PACKAGE(ZLIB REQUIRED)
	FIND_PACKAGE(PCRE REQUIRED)
	FIND_PACKAGE(OpenSSL REQUIRED)
	FIND_PACKAGE(Threads REQUIRED)
	FIND_PACKAGE(MySQL REQUIRED)
ELSE()
	ADD_SUBDIRECTORY(zlib)
	ADD_SUBDIRECTORY(pcre)
	SET(MYSQL_LIBRARY "")
ENDIF()

IF(WIN32) #On windows, we have to specify the INCLUDEs for libeay and mysql libs.
	SET(GLOBAL_INCLUDE_DIRS ${GLOBAL_INCLUDE_DIRS} 
		${DEPENDENCY_INCLUDE_ROOT}/openssl
		${DEPENDENCY_INCLUDE_ROOT}/mysql
	)
ELSE() #On apple n linux, mysql.h should have been found.
	SET(GLOBAL_INCLUDE_DIRS ${GLOBAL_INCLUDE_DIRS} ${MYSQL_INCLUDE_DIR})
ENDIF()

#For windows, link to libeay and libmysql
SET(EXTRA_LIBS)
SET(EXTRA_LIBS_PATH)
IF(WIN32)
	IF(IS_64BIT)
		SET(EXTRA_LIBS libeay32_win64.lib)
		IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
			SET(EXTRA_LIBS ${EXTRA_LIBS} libmysql_debug_x64.lib)
		ELSE()
			SET(EXTRA_LIBS ${EXTRA_LIBS} libmysql_release_x64.lib)
		ENDIF()
	ELSE(IS_64BIT)
		SET( EXTRA_LIBS libeay32_win32.lib)
		IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
			SET(EXTRA_LIBS ${EXTRA_LIBS} libmysql_debug_win32.lib)
		ELSE()
			SET(EXTRA_LIBS ${EXTRA_LIBS} libmysql_release_win32.lib)
		ENDIF()
	ENDIF()
	#Needed for socket stuff and crash handler
	SET(EXTRA_LIBS ${EXTRA_LIBS} ws2_32.lib dbghelp.lib)
ELSEIF(APPLE)
	SET(EXTRA_LIBS ${EXTRA_LIBS} "-framework Carbon")
ELSEIF(IS_LINUX)
	SET(EXTRA_LIBS ${EXTRA_LIBS} dl)
ELSE()
ENDIF()

IF(APPLE)
	IF(NOT IS_64BIT)
		SET(EMPTY "")
		STRING(REGEX REPLACE ".*-m64" "" CMAKE_C_FLAGS  "${CMAKE_C_FLAGS}")
		STRING(REGEX REPLACE ".*-m 64" "" CMAKE_C_FLAGS  "${CMAKE_C_FLAGS}")
		STRING(REGEX REPLACE ".*-m64" "" CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS}")
		STRING(REGEX REPLACE ".*-m 64" "" CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS}")
		STRING(REGEX REPLACE ".*-m64" "" CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS}")
		STRING(REGEX REPLACE ".*-m 64" "" CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS}")
		STRING(REGEX REPLACE ".*-m64" "" CMAKE_SHARED_LINKER_FLAGS  "${CMAKE_SHARED_LINKER_FLAGS}")
		STRING(REGEX REPLACE ".*-m 64" "" CMAKE_SHARED_LINKER_FLAGS  "${CMAKE_SHARED_LINKER_FLAGS}")		
		STRING(REGEX REPLACE ".*-m64" "" CMAKE_MODULE_LINKER_FLAGS  "${CMAKE_MODULE_LINKER_FLAGS}")
		STRING(REGEX REPLACE ".*-m 64" "" CMAKE_MODULE_LINKER_FLAGS  "${CMAKE_MODULE_LINKER_FLAGS}")
		ADD_DEFINITIONS(-m32)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
		SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m32 -undefined dynamic_lookup")
		SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -m32")
	ENDIF(NOT IS_64BIT)
ENDIF(APPLE)

ADD_SUBDIRECTORY(g3dlite)
ADD_SUBDIRECTORY(vmaplib)
ADD_SUBDIRECTORY(recast)
ADD_SUBDIRECTORY(detour)
ADD_SUBDIRECTORY(shared)
ADD_SUBDIRECTORY(logon)
ADD_SUBDIRECTORY(world)

IF(BUILD_SCRIPTS)
	ADD_SUBDIRECTORY(scripts)
ENDIF()

IF(NOT WIN32)
	ADD_SUBDIRECTORY(crashreport)
ENDIF()

IF(BUILD_TOOLS)
	ADD_SUBDIRECTORY(tools)
ENDIF()

INSTALL(FILES ${INSTALLED_DEPENDENCIES} DESTINATION .)
INSTALL(FILES ${CONFIGS} DESTINATION ${ARCEMU_CONFIGSFILE_PATH})